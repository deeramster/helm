cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
  - build
  - test
  - release
  - package-chart
  - deploy
  - notify

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  variables:
    SPRING_FLYWAY_ENABLED: false
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.m2/repository"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - mvn verify sonar:sonar
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK
      -Dsonar.projectName=${SONAR_PROJECT_NAME}BACKEND
      -Dsonar.host.url=$SONARQUBE_URL
      -Dsonar.login=$SONAR_LOGIN
      -Dspring.datasource.url=${TEST_DB}
      -Dspring.datasource.username=sa
      -Dspring.datasource.password=${TEST_PASS}
  allow_failure: true

gitlab-sast:
  stage: test
  needs:
    - build
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION

package-and-upload-chart:
  stage: package-chart
  image: alpine/helm:latest
  needs: ["release"]
  before_script:
    - apk add --no-cache curl gettext yq
  script:
    - |
      CHART_DIR="sausage-store-chart"
      
      # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ —Å–∞–±—á–∞—Ä—Ç–µ backend
      yq eval ".version = \"$VERSION\"" -i ${CHART_DIR}/charts/backend/Chart.yaml
      yq eval ".appVersion = \"$VERSION\"" -i ${CHART_DIR}/charts/backend/Chart.yaml
      
      # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º Chart.yaml
      yq eval ".version = \"$VERSION\"" -i ${CHART_DIR}/Chart.yaml
      yq eval ".appVersion = \"$VERSION\"" -i ${CHART_DIR}/Chart.yaml
      yq eval '.dependencies[0].version = "'$VERSION'"' -i ${CHART_DIR}/Chart.yaml
      
      # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é chart
      cd ${CHART_DIR}
      
      # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–∞–∫–µ—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π chart
      helm dependency update
      helm package . -d ../ --version $VERSION
      
      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      cd ..
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
      ls -la *.tgz
      echo "Chart packaged: sausage-store-${VERSION}.tgz"
      
      # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Nexus
      echo "Uploading chart to Nexus..."
      curl -v -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} \
        ${HELM_REPO_URL} \
        --upload-file sausage-store-${VERSION}.tgz

      echo "Chart uploaded successfully!"
  artifacts:
    paths:
      - sausage-store-${VERSION}.tgz
    expire_in: 1 week
  only:
    changes:
      - sausage-store-chart/**/*
      - backend/**/*

deploy-backend:
  stage: deploy
  image: alpine/helm:latest
  environment:
    name: production/backend
  when: manual
  needs: ["package-and-upload-backend"]
  before_script:
    - apk add --no-cache gettext
    - mkdir -p ~/.kube/
    - echo "$KUBECONFIG" > ~/.kube/config
    - export KUBECONFIG=~/.kube/config
    - |
      kubectl create secret docker-registry docker-config-secret \
        --docker-server=$CI_REGISTRY \
        --docker-username=$CI_REGISTRY_USER \
        --docker-password=$CI_REGISTRY_PASSWORD \
        --namespace=std-ext-010-34 \
        --dry-run=client -o yaml | kubectl apply -f -
    - helm repo add nexus ${HELM_REPO_URL} --username ${NEXUS_REPO_USER} --password ${NEXUS_REPO_PASS}
    - helm repo update
  script:
    - echo "Available backend chart versions:"
    - helm search repo nexus/backend --versions | head -10

    - helm upgrade --install sausage-backend nexus/backend \
        --version $VERSION \
        --set secrets.springDatasourceUrl="${SPRING_DATASOURCE_URL}" \
        --set secrets.postgresUser="${PSQLUSER}" \
        --set secrets.postgresPassword="${PSQLPASSWORD}" \
        --set secrets.mongoUser="${MONGO_USER}" \
        --set secrets.mongoPassword="${MONGO_PASSWORD}" \
        --set secrets.mongoHost="${MONGO_HOST}" \
        --set secrets.mongoDbName="${MONGO_DBNAME}" \
        --namespace std-ext-010-34 \
        --create-namespace \
        --wait \
        --timeout 5m

    - helm list -n std-ext-010-34
    - kubectl get pods -n std-ext-010-34 -l app.kubernetes.io/name=backend
  after_script:
    - rm -f ~/.kube/config
  only:
    changes:
      - sausage-store-chart/charts/backend/**/*
      - backend/**/*

telegram-notification-backend:
  stage: notify
  needs: ["deploy-backend"]
  script:
    - |
      MESSAGE="‚úÖ std-ext-010-34 –∑–∞–¥–µ–ø–ª–æ–∏–ª backend –≤–µ—Ä—Å–∏–∏ $VERSION —á–µ—Ä–µ–∑ Helm

      üì¶ –û–±—Ä–∞–∑: ${CI_REGISTRY_IMAGE}/sausage-backend:$VERSION
      üìä Chart: nexus/sausage-store:$VERSION
      üöÄ Pipeline: $CI_PIPELINE_URL
      üéØ Namespace: std-ext-010-34
      üîå NodePort: 30081"
    - |
      curl -X POST -H "Content-type: application/json" \
        --data "{\"chat_id\": \"$CHAT_ID\", \"text\": \"$MESSAGE\"}" \
        https://api.telegram.org/bot$BOT_TOKEN/sendMessage
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
