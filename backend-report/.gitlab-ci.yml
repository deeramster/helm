include:
  remote: "https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml"

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  REPORT_PORT: 8000

stages:
  - build
  - test
  - release
  - package-chart
  - deploy
  - notify

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend-report"
      --dockerfile "${CI_PROJECT_DIR}/backend-report/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend-report:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
  only:
    changes:
      - backend-report/**/*

backend-report-test:
  stage: test
  image: golang:latest
  script:
    - cd backend-report
    - go test ./app/services/health
  needs:
    - build

sonarqube-backend-report-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend-report
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONARGO}
      -Dsonar.projectKey=${SONARGO}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONARGOL}
  needs:
    - build
  allow_failure: true
  only:
    changes:
      - backend-report/**/*

release-backend-report:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $VERSION
  needs: ["build-backend-report"]
  only:
    changes:
      - backend-report/**/*

package-and-upload-backend-report:
  stage: package-chart
  image: alpine/helm:latest
  needs: ["release-backend-report"]
  before_script:
    - apk add --no-cache curl gettext yq
  script:
    - |
      CHART_DIR="sausage-store-chart"
      
      # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ —Å–∞–±—á–∞—Ä—Ç–µ backend-report
      yq eval ".version = \"$VERSION\"" -i ${CHART_DIR}/charts/backend-report/Chart.yaml
      yq eval ".appVersion = \"$VERSION\"" -i ${CHART_DIR}/charts/backend-report/Chart.yaml
      
      # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∞–±—á–∞—Ä—Ç–∞ backend-report
      cd ${CHART_DIR}/charts/backend-report
      
      # –ü–∞–∫–µ—Ç–∏—Ä—É–µ–º —Å–∞–±—á–∞—Ä—Ç backend-report –æ—Ç–¥–µ–ª—å–Ω–æ
      helm package . -d ../../../ --version $VERSION
      
      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      cd ../../../
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
      ls -la *.tgz
      echo "Backend-report chart packaged: backend-report-${VERSION}.tgz"
      
      # –ó–∞–≥—Ä—É–∂–∞–µ–º backend-report chart –≤ Nexus
      echo "Uploading backend-report chart to Nexus..."
      curl -v -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} \
        ${HELM_REPO_URL} \
        --upload-file backend-report-${VERSION}.tgz

      echo "Backend-report chart uploaded successfully!"
  artifacts:
    paths:
      - backend-report-${VERSION}.tgz
    expire_in: 1 week
  only:
    changes:
      - sausage-store-chart/charts/backend-report/**/*
      - backend-report/**/*

deploy-backend-report:
  stage: deploy
  image: alpine/helm:latest
  environment:
    name: production/backend-report
  when: manual
  needs: ["package-and-upload-backend-report"]
  before_script:
    - apk add --no-cache gettext
    - mkdir -p ~/.kube/
    - echo "$KUBECONFIG" > ~/.kube/config
    - export KUBECONFIG=~/.kube/config
    - |
      kubectl create secret docker-registry docker-config-secret \
        --docker-server=$CI_REGISTRY \
        --docker-username=$CI_REGISTRY_USER \
        --docker-password=$CI_REGISTRY_PASSWORD \
        --namespace=std-ext-010-34 \
        --dry-run=client -o yaml | kubectl apply -f -
    - helm repo add nexus ${HELM_REPO_URL} --username ${NEXUS_REPO_USER} --password ${NEXUS_REPO_PASS}
    - helm repo update
  script:
    - echo "Available backend-report chart versions:"
    - helm search repo nexus/backend-report --versions | head -10

    - helm upgrade --install sausage-backend-report nexus/backend-report \
        --version $VERSION \
        --set image.repository="${CI_REGISTRY_IMAGE}/sausage-backend-report" \
        --set mongo.user="${MONGO_USER}" \
        --set mongo.password="${MONGO_PASSWORD}" \
        --set mongo.host="${MONGO_HOST}" \
        --set mongo.dbname="${MONGO_DBNAME}" \
        --set env.DB="${DB}" \
        --namespace std-ext-010-34 \
        --create-namespace \
        --wait \
        --timeout 5m

    - helm list -n std-ext-010-34
    - kubectl get pods -n std-ext-010-34 -l app.kubernetes.io/name=backend-report
    - kubectl get hpa -n std-ext-010-34
  after_script:
    - rm -f ~/.kube/config
  only:
    changes:
      - sausage-store-chart/charts/backend-report/**/*
      - backend-report/**/*

telegram-notification-backend-report:
  stage: notify
  needs: ["deploy-backend-report"]
  script:
    - |
      MESSAGE="‚úÖ std-ext-010-34 –∑–∞–¥–µ–ø–ª–æ–∏–ª backend-report –≤–µ—Ä—Å–∏–∏ $VERSION —á–µ—Ä–µ–∑ Helm

      üì¶ –û–±—Ä–∞–∑: ${CI_REGISTRY_IMAGE}/sausage-backend-report:$VERSION
      üìä Chart: nexus/backend-report:$VERSION
      üöÄ Pipeline: $CI_PIPELINE_URL
      üéØ Namespace: std-ext-010-34
      üîå NodePort: 30082
      üìà HPA: –≤–∫–ª—é—á–µ–Ω (2-5 —Ä–µ–ø–ª–∏–∫)"
    - |
      curl -X POST -H "Content-type: application/json" \
        --data "{\"chat_id\": \"$CHAT_ID\", \"text\": \"$MESSAGE\"}" \
        https://api.telegram.org/bot$BOT_TOKEN/sendMessage
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/